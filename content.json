[{"title":"sql语句之order_by","date":"2022-04-18T11:51:02.000Z","path":"2022/04/18/“sql语句之order-by”/","excerpt":"order by：即对sql查询的结果集进行排序，可以根据数字，日期，字符等对结果进行排序","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"sql中的left join和right join","date":"2022-04-17T05:15:58.000Z","path":"2022/04/17/sql中的left-join和right-join/","excerpt":"sql中的左连接（left join）和右连接（right join）的作用","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"mybatis-plus中使用自定义方法配置","date":"2022-04-15T15:42:32.000Z","path":"2022/04/15/mybatis-plus中使用自定义方法配置/","excerpt":"使用mybatis-plus框架，对于一些简单的curd操作，使用其提供的方法即可，但是对于一些复杂操作，还是需要自己写sql语句，那么使用自定义方法时如何进行配置呢？","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"自动装箱和自动拆箱","date":"2022-04-15T12:04:31.000Z","path":"2022/04/15/自动装箱和自动拆箱/","excerpt":"java提供了8中基本数据类型，这8中类型数据不会在堆中存储，因此它们不需要new关键字来创建，而是直接在栈内存中存储，因而更加高效","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"MyIsam和InnoDB的区别","date":"2022-04-14T07:05:24.000Z","path":"2022/04/14/MyIsam和InnoDB的区别/","excerpt":"MyIsam和InnoDB是Mysql的两种存储引擎，它们两者之间有何区别？实际运用时针对不同情况应该如何选择呢？","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"初次接触机器学习","date":"2022-03-28T15:19:14.000Z","path":"2022/03/28/初次接触机器学习/","excerpt":"这次也是被迫接触了一次人工智能领域的机器学习（认知计算实验课作业），以前对这一方面是0基础，神经网络机器学习一概不知，训练调参虽然这种词经常听到，","tags":[{"name":"sharing","slug":"sharing","permalink":"http://example.com/tags/sharing/"}]},{"title":"初识spring-security配置(一)","date":"2022-03-26T09:22:29.000Z","path":"2022/03/26/初始spring-security配置/","excerpt":"在刚开始学习一个框架时，最为重要的就是学会如何配置这个框架，怎么配置它才能利用框架实现我们需要的功能，学习配置框架其实是一件非常花费精力的事情，所以写一篇博客记录我现在对于spring-security框架配置的浅显认识","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"Serializable接口","date":"2022-03-25T03:55:45.000Z","path":"2022/03/25/Serializable接口/","excerpt":"要缓存的对象必须先实现Serializable接口，因为Spring会将对象先序列化再存入redis，所以到底什么是序列化？又为什么要序列化呢？","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"java函数传参详细分析","date":"2022-03-24T15:22:10.000Z","path":"2022/03/24/java函数传参详细分析/","excerpt":"由于java没有指针，那么java在函数传参的过程中，到底传递的是一个值呢还是对象的地址呢？","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"JWT","date":"2022-03-24T13:31:20.000Z","path":"2022/03/24/jwt/","excerpt":"jwt本质是一个字符串，它可以将用户信息保存到一个json格式字符串中，然后加上头部以及secret key编码后得到jwt token，并且这个token带有签名信息，可以验证信息是否被篡改","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"class.forname() & 数据库unique约束 & @Resouce和@Autowired & @RestController & maven父子项目","date":"2022-03-24T05:16:58.000Z","path":"2022/03/24/classforname/","excerpt":"Class.forName() java类加载器负责把java字节码文件读取，然后加载到jvm中，并且转换成一个Class类的实例，每一个java类都有一个对应Class类的实例，这个类负责描述如何创建这个类的实例，比如该类包含哪些成员变量和成员方法等。在第一次使用这个类的时候，类加载器会检查是否加载此类的Class对像，如果没有加载到jvm中，则会把这个Class对象加载到jvm中。","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"常见注解 & isBlank和isEmpty的区别 & 继承中父类和子类拥有相同的成员变量名 & Throwable类","date":"2022-03-24T05:09:44.000Z","path":"2022/03/24/Bean/","excerpt":"常见注解@Bean注解此注解在于告诉一个方法，产生一个bean对象，并且这个对象交给spring管理，添加的bean的id为方法名 @Configuration注解这是一个用于定义配置类的注解，它内部含有一个或者多个带有@Bean注解的方法，这些方法会被扫描，构建bean的定义，初始化spring容器","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"java abstract class & java internal class & synchronized关键字 & 接口中的抽象方法 & set集合 & 跨域产生的原因","date":"2022-03-24T05:04:33.000Z","path":"2022/03/24/abstract-class/","excerpt":"java抽象类 java抽象类表示的一种继承关系，一个类只能继承一个抽象类，但是能实现多个接口。 抽象类不一定含有抽象方法，但是含有抽象方法的类一定是抽象类，抽象方法即有方法声明但是没有方法定义的方法 抽象类不能实例化对象，因此只有被继承才能使用抽象类","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"spring-mvc & 前后端分离项目中的请求过程 & spring-security中静态资源放行","date":"2022-03-24T05:00:24.000Z","path":"2022/03/24/springmvc/","excerpt":"前后端分离项目中的请求过程过程：在前后端分离项目中，浏览器先请求前端服务器，前端服务器返回html页面给浏览器，浏览器在进行渲染的时候渲染到有ajax请求时去请求后端服务器，后端服务器返回json数据给浏览器，浏览器然后完成后面的渲染","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"Arary.asList() & 数组和集合的区别 & 加密算法 & spring-security antMathchers匹配原则","date":"2022-03-24T04:51:37.000Z","path":"2022/03/24/array/","excerpt":"Arrays.asList()该方法是将数组转换成list集合的方法，有以下四点需要注意： 该方法适用于对象型的数组，不建议使用基本类型的数组 该方法将list集合和数组联结起来，一个更新，另一个自动更新 得到的list集合长度固定，不支持add，remove，clear方法","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"StringBuilder类 & final用法","date":"2022-03-24T04:36:37.000Z","path":"2022/03/24/StringBuilder类/","excerpt":"StringBuilder类程序开发过程中，经常碰到字符串需要连接的情况，常用的方法是使用 + 号，但是这种方法每加一次就新创建了一个String对象，而且连接效率比较低，并且比较费空间，使用StringBuilder类，即可变长字符序列，可以避免这种问题的产生。 append（）：字符串连接 toString（）：返回一个与构建器或缓冲器内容相同的字符串","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"使用接口的原因 & try catch finally & spring-boot配置文件中的on和off","date":"2022-03-24T04:32:51.000Z","path":"2022/03/24/trycatchfinally/","excerpt":"使用接口的原因 有利于代码的规范，服务的规范 有利于后续代码的运行维护修改","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"spring bean单多例和生命周期 & java枚举 & java默认访问权限","date":"2022-03-24T04:27:41.000Z","path":"2022/03/24/spring-bean/","excerpt":"spring bean单多例和生命周期spring中，bean可以被定义为两种模式，分别为singleton和prototype模式，默认是单例模式，即只有一个共享实例存在，每次请求这个bean都会返回这个唯一的实例。而多例模式每次请求bean都会返回一个新的bean实例，相当于每次请求都new一个实例。","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"haspMap查找键值原理以及key值重复问题","date":"2022-03-24T04:24:13.000Z","path":"2022/03/24/haspMap/","excerpt":"查找键值原理 hashmap底层维护了一个数组，当输入一个key值时，求这个key值的哈希值，这个哈希值实际上就是数组的下标，数组里面存储了一个Entry类，这个类分别有三个域，分别为key，value和next。next指向另一个键值不同但键值的哈希值相同的节点。 hashmap允许null值和null键","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"threadpool","date":"2022-03-24T03:53:56.000Z","path":"2022/03/24/threadpool/","excerpt":"为什么创建线程池 每次new Thread新建对象的性能差 线程缺乏统一的管理，可以无限制的创建线程，相互之间竞争，极可能占用过多的资源导致死机 缺乏更多的功能，如定期执行，定时执行等","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"spring security & 为什么前后端分离项目不能使用cookie-session机制","date":"2022-03-23T15:23:43.000Z","path":"2022/03/23/spring-security/","excerpt":"Spring Security流程原理spring security的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器 主要过滤器主要三个过滤器，他们顺序是： UsernamePasswordAutenticationFilter（负责处理登录请求，验证密码和用户） ExceptionTranslationFilter（处理过滤器中抛出的任何AccessDeniedException和AuthenticationException）","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"csrf攻击 & java何时必须进行异常处理","date":"2022-03-23T14:47:37.000Z","path":"2022/03/23/csrf攻击/","excerpt":"csrf攻击Cross-Site request forgery：称为跨站请求伪造，用户登录到一个网站A，登录成功服务器返回给用户cookie，此时用户又打开一个页面请求另外一个网站B，网站B返回给用户一些攻击性代码携带携带A网站返回给用户的cookie请求A网站，网站A能够验证该请求是来自于用户的浏览器，却不能验证该请求是否是用户的真实意愿还是恶意攻击性请求","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"Hello World","date":"2022-03-20T03:49:13.458Z","path":"2022/03/20/hello-world/","excerpt":"","tags":[]}]