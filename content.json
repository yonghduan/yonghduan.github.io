[{"title":"class.forname() & 数据库unique约束 & @Resouce和@Autowired & @RestController & maven父子项目","date":"2022-03-24T05:16:58.000Z","path":"2022/03/24/classforname/","excerpt":"Class.forName() java类加载器负责把java字节码文件读取，然后加载到jvm中，并且转换成一个Class类的实例，每一个java类都有一个对应Class类的实例，这个类负责描述如何创建这个类的实例，比如该类包含哪些成员变量和成员方法等。在第一次使用这个类的时候，类加载器会检查是否加载此类的Class对像，如果没有加载到jvm中，则会把这个Class对象加载到jvm中。","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"常见注解 & isBlank和isEmpty的区别 & 继承中父类和子类拥有相同的成员变量名 & Throwable类","date":"2022-03-24T05:09:44.000Z","path":"2022/03/24/Bean/","excerpt":"常见注解@Bean注解此注解在于告诉一个方法，产生一个bean对象，并且这个对象交给spring管理，添加的bean的id为方法名 @Configuration注解这是一个用于定义配置类的注解，它内部含有一个或者多个带有@Bean注解的方法，这些方法会被扫描，构建bean的定义，初始化spring容器","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"java abstract class & java internal class & synchronized关键字 & 接口中的抽象方法 & set集合 & 跨域产生的原因","date":"2022-03-24T05:04:33.000Z","path":"2022/03/24/abstract-class/","excerpt":"java抽象类 java抽象类表示的一种继承关系，一个类只能继承一个抽象类，但是能实现多个接口。 抽象类不一定含有抽象方法，但是含有抽象方法的类一定是抽象类，抽象方法即有方法声明但是没有方法定义的方法 抽象类不能实例化对象，因此只有被继承才能使用抽象类","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"spring-mvc & 前后端分离项目中的请求过程 & spring-security中静态资源放行","date":"2022-03-24T05:00:24.000Z","path":"2022/03/24/springmvc/","excerpt":"前后端分离项目中的请求过程过程：在前后端分离项目中，浏览器先请求前端服务器，前端服务器返回html页面给浏览器，浏览器在进行渲染的时候渲染到有ajax请求时去请求后端服务器，后端服务器返回json数据给浏览器，浏览器然后完成后面的渲染","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"Arary.asList() & 数组和集合的区别 & 加密算法 & spring-security antMathchers匹配原则","date":"2022-03-24T04:51:37.000Z","path":"2022/03/24/array/","excerpt":"Arrays.asList()该方法是将数组转换成list集合的方法，有以下四点需要注意： 该方法适用于对象型的数组，不建议使用基本类型的数组 该方法将list集合和数组联结起来，一个更新，另一个自动更新 得到的list集合长度固定，不支持add，remove，clear方法","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"StringBuilder类 & final用法","date":"2022-03-24T04:36:37.000Z","path":"2022/03/24/StringBuilder类/","excerpt":"StringBuilder类程序开发过程中，经常碰到字符串需要连接的情况，常用的方法是使用 + 号，但是这种方法每加一次就新创建了一个String对象，而且连接效率比较低，并且比较费空间，使用StringBuilder类，即可变长字符序列，可以避免这种问题的产生。 append（）：字符串连接 toString（）：返回一个与构建器或缓冲器内容相同的字符串","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"使用接口的原因 & try catch finally & spring-boot配置文件中的on和off","date":"2022-03-24T04:32:51.000Z","path":"2022/03/24/trycatchfinally/","excerpt":"使用接口的原因 有利于代码的规范，服务的规范 有利于后续代码的运行维护修改","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"spring bean单多例和生命周期 & java枚举 & java默认访问权限","date":"2022-03-24T04:27:41.000Z","path":"2022/03/24/spring-bean/","excerpt":"spring bean单多例和生命周期spring中，bean可以被定义为两种模式，分别为singleton和prototype模式，默认是单例模式，即只有一个共享实例存在，每次请求这个bean都会返回这个唯一的实例。而多例模式每次请求bean都会返回一个新的bean实例，相当于每次请求都new一个实例。","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"haspMap查找键值原理以及key值重复问题","date":"2022-03-24T04:24:13.000Z","path":"2022/03/24/haspMap/","excerpt":"查找键值原理 hashmap底层维护了一个数组，当输入一个key值时，求这个key值的哈希值，这个哈希值实际上就是数组的下标，数组里面存储了一个Entry类，这个类分别有三个域，分别为key，value和next。next指向另一个键值不同但键值的哈希值相同的节点。 hashmap允许null值和null键","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"threadpool","date":"2022-03-24T03:53:56.000Z","path":"2022/03/24/threadpool/","excerpt":"为什么创建线程池 每次new Thread新建对象的性能差 线程缺乏统一的管理，可以无限制的创建线程，相互之间竞争，极可能占用过多的资源导致死机 缺乏更多的功能，如定期执行，定时执行等","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"spring security & 为什么前后端分离项目不能使用cookie-session机制","date":"2022-03-23T15:23:43.000Z","path":"2022/03/23/spring-security/","excerpt":"Spring Security流程原理spring security的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器 主要过滤器主要三个过滤器，他们顺序是： UsernamePasswordAutenticationFilter（负责处理登录请求，验证密码和用户） ExceptionTranslationFilter（处理过滤器中抛出的任何AccessDeniedException和AuthenticationException）","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"csrf攻击 & java何时必须进行异常处理","date":"2022-03-23T14:47:37.000Z","path":"2022/03/23/csrf攻击/","excerpt":"csrf攻击Cross-Site request forgery：称为跨站请求伪造，用户登录到一个网站A，登录成功服务器返回给用户cookie，此时用户又打开一个页面请求另外一个网站B，网站B返回给用户一些攻击性代码携带携带A网站返回给用户的cookie请求A网站，网站A能够验证该请求是来自于用户的浏览器，却不能验证该请求是否是用户的真实意愿还是恶意攻击性请求","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"Hello World","date":"2022-03-20T03:49:13.458Z","path":"2022/03/20/hello-world/","excerpt":"","tags":[]}]