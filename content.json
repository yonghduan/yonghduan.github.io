[{"title":"线程中的异常处理","date":"2022-06-15T02:37:13.000Z","path":"2022/06/15/线程中的异常处理/","excerpt":"java中包含两种异常","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"线程的sleep方法","date":"2022-06-15T02:15:40.000Z","path":"2022/06/15/线程的sleep方法/","excerpt":"sleep方法和wait方法的区别 sleep方法属于Thread类，而wait（）属于Object类","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"volatile关键字的作用","date":"2022-06-14T12:43:59.000Z","path":"2022/06/14/volatile关键字的作用/","excerpt":"一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰以后，作用是：","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"垃圾收集算法","date":"2022-06-14T01:31:11.000Z","path":"2022/06/14/垃圾收集算法/","excerpt":"垃圾收集算法可以分为引用计数式垃圾回收和追踪式垃圾回收，主流java虚拟机中都采用后者","tags":[{"name":"java虚拟机","slug":"java虚拟机","permalink":"http://example.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"守护线程-daemonthread","date":"2022-06-11T07:37:18.000Z","path":"2022/06/11/守护线程-daemonthread/","excerpt":"什么是daemon - thread守护线程是为了jvm中所有非守护线程的运行提供便利服务：","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"线程安全","date":"2022-06-11T07:14:37.000Z","path":"2022/06/11/线程安全/","excerpt":"何谓线程安全？线程安全就是多线程访问同一块代码，不会产生不确定的结果。","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"java线程创建的几种方式","date":"2022-06-10T14:13:01.000Z","path":"2022/06/10/java线程创建的几种方式/","excerpt":"","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"多线程有什么用","date":"2022-06-10T13:16:22.000Z","path":"2022/06/10/多线程有什么用/","excerpt":"到底为何需要多线程呢？","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"垃圾收集器-判定哪些对象可以回收","date":"2022-06-08T03:11:20.000Z","path":"2022/06/08/垃圾收集器/","excerpt":"今天的内存动态分配和内存回收技术已经相当成熟，一切看起来已经进入了自动化时代，那为什么我们还要去了解垃圾收集和内存分配？","tags":[{"name":"java虚拟机","slug":"java虚拟机","permalink":"http://example.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"遍历arraylist时如何正确删除一个元素","date":"2022-06-06T00:36:03.000Z","path":"2022/06/06/遍历arraylist时如何正确删除一个元素/","excerpt":"在遍历ArrayList集合元素时，如果没有掌握正确的方法，可能会导致漏掉一些元素或者导致错误","tags":[{"name":"java面试","slug":"java面试","permalink":"http://example.com/tags/java%E9%9D%A2%E8%AF%95/"}]},{"title":"正则表达式","date":"2022-06-02T15:10:59.000Z","path":"2022/06/02/正则表达式/","excerpt":"为什么使用正则表达式典型的搜索和替换操作要求提供与预期的搜索结果匹配的确切文本。虽然这种技术对于静态文本执行简单的搜索和替换已经足够了，但是缺乏灵活性，若采用这种方式搜索动态文本，即使不是不可能，至少也会变得非常困难","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"java内存区域","date":"2022-06-02T01:38:50.000Z","path":"2022/06/02/java内存区域/","excerpt":"对于java程序员来说，虚拟机自动内存管理帮助他们不需要为每一个new操作写delete&#x2F;free代码，不容易出现内存泄漏和内存溢出问题。但是一旦出现问题，如果不明白java虚拟机是如何使用内存的，那么排查错误，修正问题将会非常艰难","tags":[{"name":"java虚拟机","slug":"java虚拟机","permalink":"http://example.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"同步集合和并发集合","date":"2022-05-31T12:34:15.000Z","path":"2022/05/31/同步集合和并发集合/","excerpt":"java中的同步集合和并发集合有什么区别？","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"String类字面常量相关","date":"2022-05-31T11:55:51.000Z","path":"2022/05/31/String类字面常量相关/","excerpt":"了解与字符串字面常量相关的东西","tags":[{"name":"java面试","slug":"java面试","permalink":"http://example.com/tags/java%E9%9D%A2%E8%AF%95/"}]},{"title":"ConcurrentModificationException异常","date":"2022-05-28T15:16:07.000Z","path":"2022/05/28/ConcurrentModificationException异常/","excerpt":"中文名叫做并发修改异常，它出现的原因和解决办法是什么呢？","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"基于栈的字节码解释执行引擎","date":"2022-05-28T08:06:22.000Z","path":"2022/05/28/基于栈的字节码解释执行引擎/","excerpt":"虚拟机是如何执行方法里面的字节码指令的?","tags":[{"name":"java虚拟机","slug":"java虚拟机","permalink":"http://example.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"关于找工作的感悟","date":"2022-05-27T12:57:26.000Z","path":"2022/05/27/关于找工作的感悟/","excerpt":"以前以为只要自己读研，不用十分努力，六七分的努力就可以找到大厂工作，但是今天在了解到一些去大厂面试的学长的经历，看了网上一些大厂面试的介绍之后，发现是我过于天真了","tags":[{"name":"thinking","slug":"thinking","permalink":"http://example.com/tags/thinking/"}]},{"title":"java内部类","date":"2022-05-26T01:23:56.000Z","path":"2022/05/26/java内部类/","excerpt":"java内部类的定义和作用是什么呢","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"a=a+b和a+=b的区别","date":"2022-05-26T01:23:38.000Z","path":"2022/05/26/a-a-b和a-b的区别/","excerpt":"在java语言中，当参与运算的两个数是byte，short或者int时或者它们三者的混合时，它们首先都会被转换成int类型，然后进行运算，当然最后的结果也是int类型的","tags":[{"name":"java面试","slug":"java面试","permalink":"http://example.com/tags/java%E9%9D%A2%E8%AF%95/"}]},{"title":"c/c++编译过程","date":"2022-05-23T01:06:27.000Z","path":"2022/05/23/c-c-编译过程/","excerpt":"c&#x2F;c++语言的编译过程分为四个阶段：预处理，编译，汇编和链接","tags":[{"name":"c/c++","slug":"c-c","permalink":"http://example.com/tags/c-c/"}]},{"title":"虚拟机字节码执行引擎","date":"2022-05-23T00:48:01.000Z","path":"2022/05/23/虚拟机字节码执行引擎/","excerpt":"代码编译的结果从本地机器码变成字节码，是存储格式发展的一小步，却是编程语言发展的一大步","tags":[{"name":"java虚拟机","slug":"java虚拟机","permalink":"http://example.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"算法专题：双指针","date":"2022-05-22T15:16:54.000Z","path":"2022/05/22/算法专题：双指针/","excerpt":"leetcode刷题过程中关于two pointer算法相关的题目","tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://example.com/tags/leetcode/"}]},{"title":"类加载器","date":"2022-05-22T07:10:33.000Z","path":"2022/05/22/类加载器/","excerpt":"类加载器虽然只用于实现类的加载动作，但它在java程序中起到的作用却远超类加载阶段","tags":[{"name":"java虚拟机","slug":"java虚拟机","permalink":"http://example.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"new和newInstance（）的区别","date":"2022-05-22T06:36:19.000Z","path":"2022/05/22/new和newInstance（）的区别/","excerpt":"java中new关键字和newInstance（）方法都可以创建对象实例，它们的区别是什么呢？","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"虚拟机类加载","date":"2022-05-21T12:32:31.000Z","path":"2022/05/21/虚拟机类加载/","excerpt":"字节码（Class）文件中描述了各类的信息，这些class文件最终都需要加载到虚拟机中才能被运行和使用，虚拟机如何加载这些class文件，我们知道class文件具有特定的结构，那么class文件载入虚拟机之后会发生什么变化呢？","tags":[{"name":"java虚拟机","slug":"java虚拟机","permalink":"http://example.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"java程序编译","date":"2022-05-20T01:12:56.000Z","path":"2022/05/20/java程序编译/","excerpt":"在java技术上谈编译期而没有具体的上下文环境，是一个很含糊的表达","tags":[{"name":"java虚拟机","slug":"java虚拟机","permalink":"http://example.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"field.setAccessible()","date":"2022-05-19T02:00:40.000Z","path":"2022/05/19/field-setAccessible/","excerpt":"Accessible属性是继承自AccessibleObject类，功能是启用或者禁用安全检查","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"java注解","date":"2022-05-15T12:05:44.000Z","path":"2022/05/15/java注解/","excerpt":"注解是众多引入到java se5中的重要语言变化之一","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"spring-security自定义权限认证","date":"2022-05-02T14:45:40.000Z","path":"2022/05/02/spring-security自定义权限认证/","excerpt":"利用spring-security框架，利用自定义的方法，实现权限验证","tags":[{"name":"spring-security","slug":"spring-security","permalink":"http://example.com/tags/spring-security/"}]},{"title":"接口中的静态方法","date":"2022-05-02T13:19:00.000Z","path":"2022/05/02/接口中的静态方法/","excerpt":"在jdk8之前，interface中可以定义变量和方法，变量必须是staic、public、final的，方法必须是public、abstract的，并且这些修饰符都是默认的，即意味着你写不写这些修饰符，对应的变量和方法都具有各自的默认属性。在jdk8之后，允许我们在接口中定义static方法和default方法","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"pathvariable和requestparam注解","date":"2022-04-29T02:31:46.000Z","path":"2022/04/29/pathvariable和requestparam注解/","excerpt":"@PathVariable和@RequestParam都表示url中的参数映射，它们的具体用法和区别是什么呢","tags":[{"name":"spring-boot","slug":"spring-boot","permalink":"http://example.com/tags/spring-boot/"}]},{"title":"mybatis-plus查询计数实现","date":"2022-04-27T02:29:43.000Z","path":"2022/04/27/mybatis-plus查询计数实现/","excerpt":"有这样一个业务需求，在更新用户名时，需要检查更新的用户名是否和别人有重复，常规方法我们可以调用sql中的count函数实现","tags":[{"name":"mybatis-plus","slug":"mybatis-plus","permalink":"http://example.com/tags/mybatis-plus/"}]},{"title":"mybatis-plus:update的三种方式","date":"2022-04-26T14:05:06.000Z","path":"2022/04/26/mybatis-plus-update的三种方式/","excerpt":"熟练的运用mabatis-plus这个框架，可以避免写很多简单的sql语句并配置繁琐的xml文件","tags":[{"name":"mybatis-plus","slug":"mybatis-plus","permalink":"http://example.com/tags/mybatis-plus/"}]},{"title":"kubeedge部署","date":"2022-04-24T13:38:13.000Z","path":"2022/04/24/kubeedge部署/","excerpt":"kubeedge：多领域、多场景通用云原生边缘计算平台","tags":[{"name":"sharing","slug":"sharing","permalink":"http://example.com/tags/sharing/"}]},{"title":"ubuntu换源","date":"2022-04-24T13:37:12.000Z","path":"2022/04/24/ubuntu换源/","excerpt":"ubuntu换国内源教程，亲测非常有效","tags":[{"name":"sharing","slug":"sharing","permalink":"http://example.com/tags/sharing/"}]},{"title":"java-stream","date":"2022-04-23T13:49:58.000Z","path":"2022/04/23/java-stream/","excerpt":"流是从支持数据处理操作的源生成的元素序列，源可以是数组，文件，集合，函数文件等。流不是集合元素，它不是数据结构并不保存数据，它的主要目的在于计算","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"java自动装箱陷阱","date":"2022-04-23T06:54:03.000Z","path":"2022/04/23/java自动装箱陷阱/","excerpt":"在java SE5之后，提供了自动装箱和拆箱功能，为基本类型与引用类型之间的转换带来了很大的方便，同样也有弊处","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"sql语句之order_by","date":"2022-04-18T11:51:02.000Z","path":"2022/04/18/“sql语句之order-by”/","excerpt":"order by：即对sql查询的结果集进行排序，可以根据数字，日期，字符等对结果进行排序","tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"sql中的left join和right join","date":"2022-04-17T05:15:58.000Z","path":"2022/04/17/sql中的left-join和right-join/","excerpt":"sql中的左连接（left join）和右连接（right join）的作用","tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"mybatis-plus中使用自定义方法配置","date":"2022-04-15T15:42:32.000Z","path":"2022/04/15/mybatis-plus中使用自定义方法配置/","excerpt":"使用mybatis-plus框架，对于一些简单的curd操作，使用其提供的方法即可，但是对于一些复杂操作，还是需要自己写sql语句，那么使用自定义方法时如何进行配置呢？","tags":[{"name":"mybatis-plus","slug":"mybatis-plus","permalink":"http://example.com/tags/mybatis-plus/"}]},{"title":"自动装箱和自动拆箱","date":"2022-04-15T12:04:31.000Z","path":"2022/04/15/自动装箱和自动拆箱/","excerpt":"java提供了8中基本数据类型，这8中类型数据不会在堆中存储，因此它们不需要new关键字来创建，而是直接在栈内存中存储，因而更加高效","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"MyIsam和InnoDB的区别","date":"2022-04-14T07:05:24.000Z","path":"2022/04/14/MyIsam和InnoDB的区别/","excerpt":"MyIsam和InnoDB是Mysql的两种存储引擎，它们两者之间有何区别？实际运用时针对不同情况应该如何选择呢？","tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"初次接触机器学习","date":"2022-03-28T15:19:14.000Z","path":"2022/03/28/初次接触机器学习/","excerpt":"这次也是被迫接触了一次人工智能领域的机器学习（认知计算实验课作业），以前对这一方面是0基础，神经网络机器学习一概不知，训练调参虽然这种词经常听到，","tags":[{"name":"sharing","slug":"sharing","permalink":"http://example.com/tags/sharing/"}]},{"title":"初识spring-security配置(一)","date":"2022-03-26T09:22:29.000Z","path":"2022/03/26/初始spring-security配置/","excerpt":"在刚开始学习一个框架时，最为重要的就是学会如何配置这个框架，怎么配置它才能利用框架实现我们需要的功能，学习配置框架其实是一件非常花费精力的事情，所以写一篇博客记录我现在对于spring-security框架配置的浅显认识","tags":[{"name":"spring-security","slug":"spring-security","permalink":"http://example.com/tags/spring-security/"}]},{"title":"Serializable接口","date":"2022-03-25T03:55:45.000Z","path":"2022/03/25/Serializable接口/","excerpt":"要缓存的对象必须先实现Serializable接口，因为Spring会将对象先序列化再存入redis，所以到底什么是序列化？又为什么要序列化呢？","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"java函数传参详细分析","date":"2022-03-24T15:22:10.000Z","path":"2022/03/24/java函数传参详细分析/","excerpt":"由于java没有指针，那么java在函数传参的过程中，到底传递的是一个值呢还是对象的地址呢？","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"JWT","date":"2022-03-24T13:31:20.000Z","path":"2022/03/24/jwt/","excerpt":"jwt本质是一个字符串，它可以将用户信息保存到一个json格式字符串中，然后加上头部以及secret key编码后得到jwt token，并且这个token带有签名信息，可以验证信息是否被篡改","tags":[{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"}]},{"title":"class.forname() & 数据库unique约束 & @Resouce和@Autowired & @RestController & maven父子项目","date":"2022-03-24T05:16:58.000Z","path":"2022/03/24/classforname/","excerpt":"Class.forName() java类加载器负责把java字节码文件读取，然后加载到jvm中，并且转换成一个Class类的实例，每一个java类都有一个对应Class类的实例，这个类负责描述如何创建这个类的实例，比如该类包含哪些成员变量和成员方法等。在第一次使用这个类的时候，类加载器会检查是否加载此类的Class对像，如果没有加载到jvm中，则会把这个Class对象加载到jvm中。","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"常见注解 & isBlank和isEmpty的区别 & 继承中父类和子类拥有相同的成员变量名 & Throwable类","date":"2022-03-24T05:09:44.000Z","path":"2022/03/24/Bean/","excerpt":"常见注解@Bean注解此注解在于告诉一个方法，产生一个bean对象，并且这个对象交给spring管理，添加的bean的id为方法名 @Configuration注解这是一个用于定义配置类的注解，它内部含有一个或者多个带有@Bean注解的方法，这些方法会被扫描，构建bean的定义，初始化spring容器","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"java abstract class & java internal class & synchronized关键字 & 接口中的抽象方法 & set集合 & 跨域产生的原因","date":"2022-03-24T05:04:33.000Z","path":"2022/03/24/abstract-class/","excerpt":"java抽象类 java抽象类表示的一种继承关系，一个类只能继承一个抽象类，但是能实现多个接口。 抽象类不一定含有抽象方法，但是含有抽象方法的类一定是抽象类，抽象方法即有方法声明但是没有方法定义的方法 抽象类不能实例化对象，因此只有被继承才能使用抽象类","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"spring-mvc & 前后端分离项目中的请求过程 & spring-security中静态资源放行","date":"2022-03-24T05:00:24.000Z","path":"2022/03/24/springmvc/","excerpt":"前后端分离项目中的请求过程过程：在前后端分离项目中，浏览器先请求前端服务器，前端服务器返回html页面给浏览器，浏览器在进行渲染的时候渲染到有ajax请求时去请求后端服务器，后端服务器返回json数据给浏览器，浏览器然后完成后面的渲染","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"Arary.asList() & 数组和集合的区别 & 加密算法 & spring-security antMathchers匹配原则","date":"2022-03-24T04:51:37.000Z","path":"2022/03/24/array/","excerpt":"Arrays.asList()该方法是将数组转换成list集合的方法，有以下四点需要注意： 该方法适用于对象型的数组，不建议使用基本类型的数组 该方法将list集合和数组联结起来，一个更新，另一个自动更新 得到的list集合长度固定，不支持add，remove，clear方法","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"StringBuilder类 & final用法","date":"2022-03-24T04:36:37.000Z","path":"2022/03/24/StringBuilder类/","excerpt":"StringBuilder类程序开发过程中，经常碰到字符串需要连接的情况，常用的方法是使用 + 号，但是这种方法每加一次就新创建了一个String对象，而且连接效率比较低，并且比较费空间，使用StringBuilder类，即可变长字符序列，可以避免这种问题的产生。 append（）：字符串连接 toString（）：返回一个与构建器或缓冲器内容相同的字符串","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"使用接口的原因 & try catch finally & spring-boot配置文件中的on和off","date":"2022-03-24T04:32:51.000Z","path":"2022/03/24/trycatchfinally/","excerpt":"使用接口的原因 有利于代码的规范，服务的规范 有利于后续代码的运行维护修改","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"spring bean单多例和生命周期 & java枚举 & java默认访问权限","date":"2022-03-24T04:27:41.000Z","path":"2022/03/24/spring-bean/","excerpt":"spring bean单多例和生命周期spring中，bean可以被定义为两种模式，分别为singleton和prototype模式，默认是单例模式，即只有一个共享实例存在，每次请求这个bean都会返回这个唯一的实例。而多例模式每次请求bean都会返回一个新的bean实例，相当于每次请求都new一个实例。","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"HashMap","date":"2022-03-24T04:24:13.000Z","path":"2022/03/24/haspMap/","excerpt":"查找键值原理 hashmap底层维护了一个数组，当输入一个key值时，求这个key值的哈希值，这个哈希值实际上就是数组的下标，数组里面存储了一个Entry类，这个类分别有三个域，分别为key，value和next。next指向另一个键值不同但键值的哈希值相同的节点。 hashmap允许null值和null键，hashtable不允许","tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"threadpool","date":"2022-03-24T03:53:56.000Z","path":"2022/03/24/threadpool/","excerpt":"为什么创建线程池 每次new Thread新建对象的性能差 线程缺乏统一的管理，可以无限制的创建线程，相互之间竞争，极可能占用过多的资源导致死机 缺乏更多的功能，如定期执行，定时执行等","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"spring security & 为什么前后端分离项目不能使用cookie-session机制","date":"2022-03-23T15:23:43.000Z","path":"2022/03/23/spring-security/","excerpt":"Spring Security流程原理spring security的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器 主要过滤器主要三个过滤器，他们顺序是： UsernamePasswordAutenticationFilter（负责处理登录请求，验证密码和用户） ExceptionTranslationFilter（处理过滤器中抛出的任何AccessDeniedException和AuthenticationException）","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"csrf攻击 & java何时必须进行异常处理","date":"2022-03-23T14:47:37.000Z","path":"2022/03/23/csrf攻击/","excerpt":"csrf攻击Cross-Site request forgery：称为跨站请求伪造，用户登录到一个网站A，登录成功服务器返回给用户cookie，此时用户又打开一个页面请求另外一个网站B，网站B返回给用户一些攻击性代码携带携带A网站返回给用户的cookie请求A网站，网站A能够验证该请求是来自于用户的浏览器，却不能验证该请求是否是用户的真实意愿还是恶意攻击性请求","tags":[{"name":"learning notes","slug":"learning-notes","permalink":"http://example.com/tags/learning-notes/"}]},{"title":"Hello World","date":"2022-03-20T03:49:13.458Z","path":"2022/03/20/hello-world/","excerpt":"","tags":[]}]